snippet aft "aft"
after(${1::each}) do
	${2}
end

endsnippet

snippet annot "annot"
any_number_of_times

endsnippet

snippet anr "anr"
and_return(${1:value})

endsnippet

snippet anra "anra"
and_raise(${1:exception})

endsnippet

snippet anrb "anrb"
and_return { ${1} }

endsnippet

snippet ant "ant"
and_throw(${1:sym})

endsnippet

snippet any "any"
and_yield(${1:values})

endsnippet

snippet atl "atl"
at_least(${1:n}).times

endsnippet

snippet atm "atm"
at_most(${1:n}).times

endsnippet

snippet bef "bef"
before(${1::each}) do
	${2}
end

endsnippet

snippet conn "conn"
controller_name :${1:controller}

endsnippet

snippet des "des"
describe "${1:subject}" do
	${2}
end

endsnippet

snippet desc "desc"
require 'spec_helper'

describe ${1:`!v Snippet_RubyClassNameFromFilename()`} do
	${2}
end

endsnippet

snippet desrc "desrc"
describe ${1:controller}, "${2:GET|POST|PUT|DELETE} ${3:/some/path}${4}" do
	${5}
end

endsnippet

snippet dest "dest"
describe ${1:Type} do
	${2}
end

endsnippet

snippet dests "dests"
describe ${1:Type}, "${2:description}" do
	${3}
end

endsnippet

snippet ex "ex"
exactly(${1:n}).times

endsnippet

snippet isbl "isbl"
it_should_behave_like '${1:do something}'

endsnippet

snippet it "it"
it "${1}" do
	${2}
end

endsnippet

snippet its "its"
it "should ${1:do something}" do${2}

endsnippet

snippet mat "mat"
class ${1:ReverseTo}
	def initialize(${2:param})
		@$2 = $2
	end

	def matches?(actual)
		@actual = actual
		# Satisfy expectation here. Return false or raise an error if it's not met.
		${3:@actual.reverse.should == @$2}
		true
	end

	def failure_message
		"expected #{@actual.inspect} to ${4} #{@$2.inspect}, but it didn't"
	end

	def negative_failure_message
		"expected #{@actual.inspect} not to ${5} #{@$2.inspect}, but it did"
	end
end

def ${6:reverse_to}(${7:expected})
	${8}.new($7)
end

endsnippet

snippet mm "mm"
mock_model(${1:model})${2}

endsnippet

snippet moc "moc"
${1:var} = mock("${2:mock_name}"${3:, :null_object => true})
${4}

endsnippet

snippet mocw "mocw"
Spec::Runner.configure do |config|
	config.mock_with :${1:mocha|flexmock|rr}
end

endsnippet

snippet on "on"
once

endsnippet

snippet resh "resh"
require File.dirname(__FILE__) + '/../spec_helper'

endsnippet

snippet sef "sef"
shared_examples_for "${1:do something}" do
  ${2}
end

endsnippet

snippet sh "sh"
${1:target}.should == ${2:value}
${3}

endsnippet

snippet shb "shb"
${1:target}.should be(${2:result})
${3}

endsnippet

snippet shbc "shbc"
${1:target}.should be_close(${2:result}, ${3:tolerance})
${4}

endsnippet

snippet shbio "shbio"
${1:target}.should be_instance_of(${2:class})
${3}

endsnippet

snippet shbko "shbko"
${1:target}.should be_a_kind_of(${2:class})
${3}

endsnippet

snippet shbr "shbr"
response.should be_redirect
${1}

endsnippet

snippet shbs "shbs"
response.should be_success
${1}

endsnippet

snippet shc "shc"
lambda do
	${1}
end.should change(${2:target}, :${3:method}).from(${4:old_value}).to(${5:new_value}).by(${6:change})

endsnippet

snippet shdm "shdm"
${1:target}.should match(/${2:regexp}/)
${3}

endsnippet

snippet she "she"
${1:target}.should eql(${2:value})
${3}

endsnippet

snippet sheq "sheq"
${1:target}.should equal(${2:value})
${3}

endsnippet

snippet shh "shh"
${1:target}.should have(${2:num}).${3:things}
${4}

endsnippet

snippet shhal "shhal"
${1:target}.should have_at_least(${2:num}).${3:things}
${4}

endsnippet

snippet shham "shham"
${1:target}.should have_at_most(${2:num}).${3:things}
${4}

endsnippet

snippet shhr "shhr"
${1:target}.should have(${2:n}).records
${3}

endsnippet

snippet shn "shn"
${1:target}.should_not == ${2:value}
${3}

endsnippet

snippet shnb "shnb"
${1:target}.should_not be(${2:result})
${3}

endsnippet

snippet shnbc "shnbc"
${1:target}.should_not be_close(${2:result}, ${3:tolerance})
${4}

endsnippet

snippet shnbio "shnbio"
${1:target}.should_not be_instance_of(${2:klass})
${3}

endsnippet

snippet shnbko "shnbko"
${1:target}.should_not be_a_kind_of(${2:klass})
${3}

endsnippet

snippet shnbr "shnbr"
response.should_not be_redirect
${1}

endsnippet

snippet shnbs "shnbs"
response.should_not be_success
${1}

endsnippet

snippet shnc "shnc"
lambda do
	${1}
end.should_not change(${2:target}, :${3:method})

endsnippet

snippet shne "shne"
${1:target}.should_not eql(${2:value})
${3}

endsnippet

snippet shneq "shneq"
	${1:target}.should_not equal(${2:value})
	${3}

endsnippet

snippet shnm "shnm"
${1:target}.should_not match(/${2:regexp}/)
${3}

endsnippet

snippet shnp "shnp"
${1:target}.should_not be_${2:predicate}

endsnippet

snippet shnr "shnr"
${1:mock}.should_not_receive(:${2:message})${3}
${4}

endsnippet

snippet shnre "shnre"
${1:target}.should_not raise_error(${2:error})
${3}

endsnippet

snippet shnredt "shnredt"
response.should_not redirect_to(${1:url})
${2}

endsnippet

snippet shnrt "shnrt"
${1:target}.should_not respond_to(:${2:sym})
${3}

endsnippet

snippet shns "shns"
${1:target}.should_not satisfy { |${2:obj}| ${3} }
${4}

endsnippet

snippet shnt "shnt"
lambda { ${1} }.should_not throw_symbol(:${2:symbol})
${3}

endsnippet

snippet shp "shp"
${1:target}.should be_${2:predicate}

endsnippet

snippet shr "shr"
${1:mock}.should_receive(:${2:message})${3}
${4}

endsnippet

snippet shre "shre"
${1:target}.should raise_error(${2:error})
${3}

endsnippet

snippet shredt "shredt"
response.should redirect_to(${1:url})
${2}

endsnippet

snippet shrt "shrt"
${1:target}.should respond_to(:${2:sym})
${3}

endsnippet

snippet shs "shs"
${1:target}.should satisfy { |${2:obj}| ${3} }
${4}

endsnippet

snippet sht "sht"
${1:target}.should throw_symble(:${2:symbol})
${3}

endsnippet

snippet shtemp "shtemp"
response.should render_template(:${1:template})
${2}

endsnippet

snippet tw "tw"
twice

endsnippet

snippet wia "wia"
with(${1:args})
${2}

endsnippet

